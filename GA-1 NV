#include <iostream>
#include <ctime> // Подключаем библиотеку для работы со временем
using namespace std;
//ЗАДАНИЕ 1
// Функция сортировки выбором по возрастанию
void selectionSortAsc(int* arr, int size) {
    for (int i = 0; i < size - 1; ++i) { // Внешний цикл проходит по каждому элементу массива
        int minIndex = i;                 // Предположительно минимальное значение находится на текущей позиции
        for (int j = i + 1; j < size; ++j) { // Внутренний цикл ищет минимальный элемент справа
            if (arr[j] < arr[minIndex])   // Если нашли новый минимум
                minIndex = j;              // Сохраняем позицию нового минимума
        }
        swap(arr[i], arr[minIndex]);      // Меняем местами текущий элемент с минимальным
    }
}

int main() {
    srand(time(nullptr));   // Инициализируем генератор случайных чисел
    const int SIZE = 10;      // Определяем размер массива
    int arr[SIZE];     // Создаем массив длиной SIZE
    
    
    cout << "Исходный массив:" << endl;  // Заполняем массив случайными числами от 2 до 103
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = rand() % 102 + 2;    // Заполняем массив случайными числами
        cout << arr[i] << ' ';   // Выводим содержимое массива
    }
    cout << endl;
    
    
    selectionSortAsc(arr, SIZE);  // Сортируем массив методом выбора по возрастанию
    
   
    cout << "Отсортированный массив по возрастанию:" << endl;  // Выводим отсортированный массив
    for (int i = 0; i < SIZE; ++i) {
        cout << arr[i] << ' ';
    }
    cout << endl;
    return 0;
}




//ЗАДАНИЕ 2



void selectionSortDesc(int* arr, int size) { // Функция сортировки выбором по убыванию
    for (int i = 0; i < size - 1; ++i) {     // Проходим по каждому элементу массива
        int maxIndex = i;                     // Предполагаемая позиция максимального элемента
        for (int j = i + 1; j < size; ++j) { // Поиск максимального элемента вправо
            if (arr[j] > arr[maxIndex])      // Если находим больший элемент
                maxIndex = j;                 // Обновляем индекс максимального элемента
        }
        swap(arr[i], arr[maxIndex]);          // Меняем местами текущий элемент с максимальным
    }
}

int main() {
    srand(time(nullptr));                      // Инициализация генератора случайных чисел
    const int SIZE = 10;                       // Определяем размер массива
    int arr[SIZE];                             // Создаем массив длины SIZE
    
    // Заполняем массив случайными числами от 0 до 100
    cout << "Исходный массив:" << endl;
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = rand() % 101;                 // Генерируем случайные числа от 0 до 100
        cout << arr[i] << ' ';                  // Выводим содержание массива
    }
    cout << endl;
    
    // Сортируем массив методом выбора по убыванию
    selectionSortDesc(arr, SIZE);
    
    // Выводим отсортированный массив
    cout << "Отсортированный массив по убыванию:" << endl;
    for (int i = 0; i < SIZE; ++i) {
        cout << arr[i] << ' ';
    }
    cout << endl;
    
    return 0;
}



//ЗАДАНИЕ 3


int extractNumber(const string& str) { // Функция, извлекающая цифры из строки типа XX-YY-ZZ
    string digitsOnly;
    for(char ch : str) { // Просматриваем символы строки
        if(isdigit(ch)) { // Если символ цифра
            digitsOnly += ch; // Добавляем в результирующую строку
        }
    }
    return stoi(digitsOnly); // Преобразуем строку в целое число
}

// Функция сортировки телефонных номеров методом выбора по возрастанию
void selectionSortPhoneNumbers(string* phones, int size) {
    for (int i = 0; i < size - 1; ++i) {           // Основные проходы по массиву
        int minIndex = i;                           // Предположительный минимальный элемент
        for (int j = i + 1; j < size; ++j) {        // Поиск наименьшего номера справа
            if (extractNumber(phones[j]) < extractNumber(phones[minIndex]))
                minIndex = j;                       // Обновляем индекс минимального номера
        }
        swap(phones[i], phones[minIndex]);          // Меняем места текущий и минимальный элементы
    }
}

int main() {
    const int SIZE = 3;                         // Определили количество телефонных номеров
    string phones[] = {"23-45-67", "89-12-34", "56-78-90"}; // Список телефонных номеров
    
    // Выводим исходные телефонные номера
    cout << "Исходные телефонные номера:" << endl;
    for (const auto &phone : phones) {
        cout << phone << ' ';
    }
    cout << endl;
    
    // Сортируем телефонные номера методом выбора
    selectionSortPhoneNumbers(phones, SIZE);
    
    // Выводим отсортированные телефонные номера
    cout << "Отсортированные телефонные номера:" << endl;
    for (const auto &phone : phones) {
        cout << phone << ' ';
    }
    cout << endl;
    
    return 0;
}
